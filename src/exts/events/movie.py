import re
from interactions import (
    SlashCommand, slash_option,
    Extension, Permissions,
    OptionType, SlashContext,
    Embed, ActionRow, StringSelectMenu, StringSelectOption,
    component_callback, ComponentContext, listen, Button, ButtonStyle, Modal, ShortText,
    modal_callback, ModalContext
)
from services.events.movie import MovieService, setup_tasks
from utils.tomlIO import TomlIO
from typing import Dict


from config import admin
_movie_perms = Permissions(int(admin.get("permissions.movie")))


class MovieCog(Extension):
    """–û–ø—Ä–æ—Å—ã —Ñ–∏–ª—å–º–æ–≤: —Å–æ–∑–¥–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""

    def __init__(self, bot) -> None:
        self.bot = bot
        self.svc = MovieService()
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–ª—è –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫–æ–π –æ–ø—Ä–æ—Å –æ–∂–∏–¥–∞—Ç—å –ø—Ä–∏ —Å–∞–±–º–∏—Ç–µ –º–æ–¥–∞–ª–∫–∏
        self._pending_add: Dict[int, int] = {}


    @listen()
    async def on_startup(self):
        setup_tasks(self.bot, self.svc)


    movie = SlashCommand(
        name="movie",
        description="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ñ–∏–ª—å–º",
        default_member_permissions=_movie_perms
    )


    @movie.subcommand(sub_cmd_name="create", sub_cmd_description="–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
    @slash_option(name="title",
                  description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞",
                  opt_type=OptionType.STRING,
                  required=True)
    @slash_option(name="when",
                  description="–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YY HH:MM (MSK)",
                  opt_type=OptionType.STRING,
                  required=True)
    @slash_option(name="description",
                  description="–û–ø–∏—Å–∞–Ω–∏–µ",
                  opt_type=OptionType.STRING,
                  required=False)
    async def cmd_create(self,
                         ctx: SlashContext,
                         title: str,
                         when: str,
                         description: str = ""):
        try:
            mid = await self.svc.create_poll(ctx, title, when, description)
            await ctx.send(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å. message_id: {mid}", ephemeral=True)
        except Exception as e:
            await ctx.send(f"‚ùó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}", ephemeral=True)


    @movie.subcommand(sub_cmd_name="stop", sub_cmd_description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–ø–æ message_id)")
    @slash_option(name="message_id",
                  description="ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞",
                  opt_type=OptionType.STRING,
                  required=True)
    async def cmd_stop(self,
                       ctx: SlashContext,
                       message_id: str):
        try:
            mid = int(message_id)
            poll = self.svc.db.get_poll(mid)
            if not poll:
                return await ctx.send("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)

            self.svc.db.set_poll_status(mid, "closed")

            channel_id = int(self.svc.cfg.get("channels.movie_polls"))
            channel = await ctx.client.fetch_channel(channel_id)
            msg = await channel.fetch_message(mid)

            embed = self.svc._build_poll_embed(mid)
            winner = self.svc.db.pick_winner(mid)
            if winner:
                embed.add_field(name="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å",
                                value=f"{winner['title']} ({self.svc.db.count_votes_by_option(mid).get(int(winner['id']), 0)} –≥–æ–ª–æ—Å–æ–≤)",
                                inline=False)
            await msg.edit(embed=embed, components=[])

            # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å –ø–∏–Ω–≥–æ–º —Ä–æ–ª–∏ movie (–µ—Å–ª–∏ –µ—Å—Ç—å)
            winner = self.svc.db.pick_winner(mid)
            if winner:
                role_id = self.svc.cfg.get("roles.movie")
                mention = f"<@&{int(role_id)}> " if role_id else ""
                announce = f"{mention}üéâ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–µ–≥–æ–¥–Ω—è —Å–º–æ—Ç—Ä–∏–º: {winner['title']}"
                if winner.get("link"):
                    announce += f"\n{winner['link']}"
                await channel.send(announce)

            await ctx.send("‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω", ephemeral=True)
        except Exception as e:
            await ctx.send(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}", ephemeral=True)


    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å–º" ‚Üí –º–æ–¥–∞–ª–∫–∞
    @component_callback("movie_add")
    async def on_add_button(self, ctx: ComponentContext):
        try:
            poll_message_id = int(ctx.message.id)
            # –ü—Ä–∏–≤—è–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–ø—Ä–æ—Å—É
            self._pending_add[int(ctx.author.id)] = poll_message_id
            modal = Modal(
                ShortText(label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞", custom_id="movie_add_title", required=True, max_length=200),
                title="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å–º",
                custom_id="movie_add"
            )
            await ctx.send_modal(modal)
        except Exception as e:
            await ctx.send(f"‚ùó –û—à–∏–±–∫–∞: {e}", ephemeral=True)


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    @modal_callback("movie_add")
    async def on_add_modal(self, ctx: ModalContext, movie_add_title: str):
        try:
            user_id = int(ctx.author.id)
            poll_message_id = self._pending_add.get(user_id)
            if not poll_message_id:
                # –§–æ–ª–ª–±—ç–∫: –≤–æ–∑—å–º—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π –æ–ø—Ä–æ—Å
                latest = self.svc.db.get_latest_open_poll()
                if not latest:
                    return await ctx.send("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å", ephemeral=True)
                poll_message_id = int(latest["message_id"])
            # –û—á–∏—Å—Ç–∏–º –ø—Ä–∏–≤—è–∑–∫—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ª–∏–ø–∞–ª–∞
            self._pending_add.pop(user_id, None)
            title_val = movie_add_title or ""

            ok = await self.svc.add_option(poll_message_id, title_val, None, int(ctx.author.id))
            if not ok:
                return await ctx.send("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –¥—É–±–ª–∏–∫–∞—Ç –∏–ª–∏ –æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç)", ephemeral=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            channel_id = int(self.svc.cfg.get("channels.movie_polls"))
            channel = await self.bot.fetch_channel(channel_id)
            try:
                msg = await channel.fetch_message(poll_message_id)
                await msg.edit(embed=self.svc._build_poll_embed(poll_message_id),
                               components=self.svc._build_vote_components(poll_message_id))
            except Exception:
                pass

            await ctx.send("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω", ephemeral=True)
        except Exception as e:
            try:
                await ctx.send(f"‚ùó –û—à–∏–±–∫–∞: {e}", ephemeral=True)
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏), –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                pass


    # –í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞ –∏–∑ —Å–µ–ª–µ–∫—Ç–∞ ‚Üí –≥–æ–ª–æ—Å
    @component_callback("movie_vote")
    async def on_vote_select(self, ctx: ComponentContext):
        try:
            poll_message_id = int(ctx.message.id)
            if not ctx.values:
                return await ctx.send("‚ùó –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", ephemeral=True)
            option_id = int(ctx.values[0])
            ok = await self.svc.cast_vote(poll_message_id, int(ctx.author.id), option_id)
            if not ok:
                return await ctx.send("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç)", ephemeral=True)

            await ctx.edit_origin(embed=self.svc._build_poll_embed(poll_message_id),
                                  components=self.svc._build_vote_components(poll_message_id))
        except Exception as e:
            await ctx.send(f"‚ùó –û—à–∏–±–∫–∞: {e}", ephemeral=True)


