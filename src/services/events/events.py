import interactions
import os

from datetime import datetime, timedelta
import pytz
from typing import List

from utils.db import Events
from utils.log import log_db
from interactions import Task, IntervalTrigger
from config import admin


class EventsService:
    """ Core-–ª–æ–≥–∏–∫–∞ –∏–≤–µ–Ω—Ç–æ–≤: —Å–æ–∑–¥–∞–Ω–∏–µ, —É—á–∞—Å—Ç–∏–µ, –≤—ã—Ö–æ–¥, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è """



    def __init__(self) -> None:
        self.db = Events()
        self.cfg = admin
        self.MSK = pytz.timezone("Europe/Moscow")



    async def create(self,
                     ctx: interactions.SlashContext,
                     title: str,
                     description: str,
                     when_str: str,
                     max_participants: int = 100) -> int:

        """
            –°–æ–∑–¥–∞—ë—Ç embed-–ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–≤–µ–Ω—Ç –≤ –ë–î
            
            Args:
                ctx: SlashContext
                title: str
                description: str
                when_str: str
                max_participants: int = 100

            Returns:
                int: message_id
        """

        channel_id = int(self.cfg.get("channels.events"))
        channel = await ctx.client.fetch_channel(channel_id)

        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "DD.MM.YY HH:MM" –≤ MSK
        when_naive = datetime.strptime(when_str, "%d.%m.%y %H:%M")
        when_dt = self.MSK.localize(when_naive)

        embed = interactions.Embed(
            title=f"üéØ {title}",
            description=description or "",
            color=0x5865F2
        )
        embed.add_field(name="–ù–∞—á–∞–ª–æ", value=f"<t:{int(when_dt.timestamp())}:F>", inline=False)
        embed.add_field(name="–õ–∏–º–∏—Ç", value=str(max_participants), inline=True)
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=f"0/{max_participants}", inline=True)
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=self._compute_status(when_dt.isoformat(), db_status="planned"), inline=True)
        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏–ª–∏ –≤—ã–π—Ç–∏")

        components = interactions.ActionRow(
            interactions.Button(style=interactions.ButtonStyle.SUCCESS, label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", custom_id="event_toggle"),
            interactions.Button(style=interactions.ButtonStyle.SECONDARY, label="–ò–≥—Ä–æ–∫–∏", custom_id="event_list")
        )

        msg = await channel.send(embed=embed, components=components)

        self.db.add_event(
            message_id=int(msg.id),
            title=title,
            description=description or "",
            participants="",
            max_participants=max_participants,
            status="planned",
            ts=when_dt.isoformat()
        )

        log_db("INFO", f"–°–æ–∑–¥–∞–Ω –∏–≤–µ–Ω—Ç '{title}' ({msg.id})")
        return int(msg.id)


    def build_event_embed(self, message_id: int) -> interactions.Embed:
        """ –°—Ç—Ä–æ–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π embed –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î """
        e = self.db.get_event(message_id)
        if not e:
            return interactions.Embed(title="–ò–≤–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", color=0xED4245)

        title: str = e["title"]
        description: str = e.get("description") or ""
        max_participants: int = int(e["max_participants"])
        ts = e["ts"]
        when_dt = datetime.fromisoformat(ts)

        participants_list = [int(p) for p in (e["participants"].split(",") if e["participants"] else []) if p]
        cur = len(participants_list)

        embed = interactions.Embed(
            title=f"üéØ {title}",
            description=description,
            color=0x5865F2
        )
        embed.add_field(name="–ù–∞—á–∞–ª–æ", value=f"<t:{int(when_dt.timestamp())}:F>", inline=False)
        embed.add_field(name="–õ–∏–º–∏—Ç", value=str(max_participants), inline=True)
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=f"{cur}/{max_participants}", inline=True)
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=self._compute_status(when_dt.isoformat(), db_status=str(e.get("status", "planned"))), inline=True)
        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏–ª–∏ –≤—ã–π—Ç–∏")
        return embed


    def _compute_status(self, when_iso: str, db_status: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≤–µ–Ω—Ç–∞.
        –ü—Ä–∞–≤–∏–ª–∞:
          - –ï—Å–ª–∏ db_status == 'finished' ‚Üí "–ó–∞–∫–æ–Ω—á–∏–ª—Å—è".
          - –ò–Ω–∞—á–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:
              now < start-5m ‚Üí "–°–∫–æ—Ä–æ"
              start-5m <= now < start ‚Üí "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è"
              now >= start ‚Üí "–ò–¥—ë—Ç"
        """
        now = datetime.now(self.MSK)
        start = datetime.fromisoformat(when_iso)
        # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ MSK, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±–µ–∑ TZ
        if start.tzinfo is None:
            start = self.MSK.localize(start)
        if str(db_status).lower() == "finished":
            return "–ó–∞–∫–æ–Ω—á–∏–ª—Å—è"
        start_minus_5 = start - timedelta(minutes=5)
        if now < start_minus_5:
            return "–°–∫–æ—Ä–æ"
        if start_minus_5 <= now < start:
            return "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è"
        return "–ò–¥—ë—Ç"



    async def join(self, message_id: int, user_id: int) -> tuple[bool, int, int]:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–≤–µ–Ω—Ç—É"""
        ok, cur, mx = self.db.add_participant(message_id, user_id)
        return (ok, cur, mx)



    async def leave(self, message_id: int, user_id: int) -> tuple[bool, int, int]:
        """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–≤–µ–Ω—Ç–∞"""
        ok, cur, mx = self.db.remove_participant(message_id, user_id)
        return (ok, cur, mx)



    async def notify_upcoming(self, client: interactions.Client) -> List[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ ~5 –º–∏–Ω—É—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ message_id, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        now = datetime.now(self.MSK)
        start = (now + timedelta(minutes=4)).isoformat()
        end = (now + timedelta(minutes=6)).isoformat()
        events = self.db.list_need_notification(start, end)

        notified: List[int] = []
        if not events:
            return notified

        notif_channel_id = int(self.cfg.get("channels.event_notifications"))
        notif_channel = await client.fetch_channel(notif_channel_id)

        for e in events:
            participants = [int(p) for p in (e["participants"].split(",") if e["participants"] else []) if p]
            if not participants:
                continue

            mentions = " ".join(f"<@{pid}>" for pid in participants)
            await notif_channel.send(f"‚è∞ –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–∞—á–Ω—ë—Ç—Å—è –∏–≤–µ–Ω—Ç '{e['title']}' {mentions}")
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç–µ
            try:
                self.db.set_status(int(e["message_id"]), "notified")
            except Exception:
                pass
            notified.append(int(e["message_id"]))
        return notified


    async def refresh_status_embeds(self, client: interactions.Client) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ embed –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤"""
        now = datetime.now(self.MSK)
        # –ë–µ—Ä—ë–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤ –∏–ª–∏ –Ω–∞—á–∞–ª–∏—Å—å –Ω–µ –ø–æ–∑–∂–µ 3 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        relevant: list[dict] = self.db.list_events(limit=200)
        channel_id = int(self.cfg.get("channels.events"))
        channel = await client.fetch_channel(channel_id)

        for e in relevant:
            start = datetime.fromisoformat(e["ts"]).astimezone(self.MSK)
            if (now - timedelta(hours=3)) <= start <= (now + timedelta(hours=12)):
                try:
                    msg = await channel.fetch_message(int(e["message_id"]))
                    embed = self.build_event_embed(int(e["message_id"]))
                    await msg.edit(embed=embed)
                except Exception:
                    pass


_TASK_STARTED = False


def setup_tasks(bot: interactions.Client, service: EventsService) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—É (–æ–¥–∏–Ω–æ—á–Ω—ã–π —Å—Ç–∞—Ä—Ç)"""
    global _TASK_STARTED
    if _TASK_STARTED:
        return

    @Task.create(IntervalTrigger(minutes=1))
    async def _notify_loop():
        try:
            await service.notify_upcoming(bot)
            await service.refresh_status_embeds(bot)
        except Exception:
            pass

    _notify_loop.start()
    _TASK_STARTED = True


