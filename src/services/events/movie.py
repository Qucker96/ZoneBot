import interactions
from datetime import datetime, timedelta
import pytz
from typing import List, Optional

from utils.db import MoviePolls
from utils.log import log_db
from interactions import Task, IntervalTrigger
from config import admin

class MovieService:
    """–Ø–¥—Ä–æ –ª–æ–≥–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞ —Ñ–∏–ª—å–º: —Å–æ–∑–¥–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –∑–∞–∫—Ä—ã—Ç–∏–µ"""

    def __init__(self) -> None:
        self.db = MoviePolls()

        self.cfg = admin
        self.MSK = pytz.timezone("Europe/Moscow")


    def _format_until(self, end_iso: str) -> str:
        dt = datetime.fromisoformat(end_iso)
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ú–°–ö –∏ –≤—ã–≤–æ–¥–∏–º —è–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö + –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        if dt.tzinfo is None:
            dt = self.MSK.localize(dt)
        msk_dt = dt.astimezone(self.MSK)
        human_msk = msk_dt.strftime("%d.%m.%Y %H:%M")
        return f"{human_msk} (–ú–°–ö)"


    def _build_poll_embed(self, message_id: int) -> interactions.Embed:
        poll = self.db.get_poll(message_id)
        if not poll:
            return interactions.Embed(title="–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", color=0xED4245)

        title = poll["title"]
        description = poll.get("description") or ""
        status = str(poll.get("status", "open"))
        ts_end = poll["ts_end"]

        counts = self.db.count_votes_by_option(message_id)
        options = self.db.list_options(message_id)

        embed = interactions.Embed(
            title=f"üé¨ {title}",
            description=description,
            color=0x5865F2
        )
        embed.add_field(name="–ù–∞—á–∞–ª–æ", value=self._format_until(ts_end), inline=True)
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–û—Ç–∫—Ä—ã—Ç" if status == "open" else "–ó–∞–≤–µ—Ä—à—ë–Ω", inline=True)

        if options:
            lines: List[str] = []
            for opt in options:
                v = counts.get(int(opt["id"]), 0)
                line = f"‚Ä¢ {opt['title']} ‚Äî {v}"
                if opt.get("link"):
                    line += f"\n{opt['link']}"
                lines.append(line)
            embed.add_field(name="–í–∞—Ä–∏–∞–Ω—Ç—ã", value="\n".join(lines)[:1000] or "‚Äî", inline=False)
        else:
            embed.add_field(name="–í–∞—Ä–∏–∞–Ω—Ç—ã", value="–ü–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å–º'", inline=False)

        embed.set_footer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ–π")
        return embed


    def _build_vote_components(self, message_id: int) -> List[interactions.ActionRow]:
        options = self.db.list_options(message_id)
        has_options = len(options) > 0

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
        row_buttons = interactions.ActionRow(
            interactions.Button(style=interactions.ButtonStyle.PRIMARY,
                                 label="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å–º",
                                 custom_id="movie_add"),
        )

        # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        select_options: List[interactions.StringSelectOption] = []
        for opt in options:
            select_options.append(
                interactions.StringSelectOption(
                    label=(opt["title"][:100] if len(opt["title"]) > 100 else opt["title"]),
                    value=str(opt["id"])
                )
            )

        opts = select_options or [interactions.StringSelectOption(label="–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", value="0")]
        select_menu = interactions.StringSelectMenu(
            *opts,
            custom_id="movie_vote",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º",
            min_values=1,
            max_values=1,
            disabled=not has_options,
        )

        row_select = interactions.ActionRow(select_menu)
        return [row_buttons, row_select]


    async def create_poll(self,
                          ctx: interactions.SlashContext,
                          title: str,
                          end_str: str,
                          description: str = "") -> int:
        """–°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç poll –≤ –ë–î"""
        channel_id = int(self.cfg.get("channels.movie_polls"))
        channel = await ctx.client.fetch_channel(channel_id)

        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "DD.MM.YY HH:MM" –≤ MSK
        end_naive = datetime.strptime(end_str, "%d.%m.%y %H:%M")
        end_dt = self.MSK.localize(end_naive)

        embed = self._build_poll_embed_placeholder(title=title, description=description, ts_end=end_dt.isoformat())
        components = self._build_vote_components(message_id=0)  # –∑–∞–≥–ª—É—à–∫–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º

        msg = await channel.send(embed=embed, components=components)

        self.db.add_poll(
            message_id=int(msg.id),
            title=title,
            description=description or "",
            ts_end=end_dt.isoformat(),
            status="open",
        )

        # –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏–º embed/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º message_id
        await msg.edit(embed=self._build_poll_embed(int(msg.id)), components=self._build_vote_components(int(msg.id)))

        log_db("INFO", f"–°–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å —Ñ–∏–ª—å–º–æ–≤ '{title}' ({msg.id})")
        return int(msg.id)


    def _build_poll_embed_placeholder(self, title: str, description: str, ts_end: str) -> interactions.Embed:
        embed = interactions.Embed(title=f"üé¨ {title}", description=description or "", color=0x5865F2)
        embed.add_field(name="–ù–∞—á–∞–ª–æ", value=self._format_until(ts_end), inline=True)
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–û—Ç–∫—Ä—ã—Ç", inline=True)
        embed.add_field(name="–í–∞—Ä–∏–∞–Ω—Ç—ã", value="–ü–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∏–ª—å–º'", inline=False)
        embed.set_footer(text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ–π")
        return embed


    async def add_option(self, message_id: int, title: str, link: Optional[str], author_id: Optional[int]) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
        poll = self.db.get_poll(message_id)
        if not poll or str(poll.get("status")) != "open":
            return False
        existing = self.db.list_options(message_id)
        title_norm = title.strip().casefold()
        for opt in existing:
            if opt["title"].strip().casefold() == title_norm:
                return False
        self.db.add_option(message_id, title.strip(), (link or "").strip() or None, author_id)
        return True


    async def cast_vote(self, message_id: int, user_id: int, option_id: int) -> bool:
        poll = self.db.get_poll(message_id)
        if not poll or str(poll.get("status")) != "open":
            return False
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –æ–ø—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –æ–ø—Ä–æ—Å—É
        options = self.db.list_options(message_id)
        valid_ids = {int(o["id"]) for o in options}
        if option_id not in valid_ids:
            return False
        self.db.upsert_vote(message_id, user_id, option_id)
        return True


    async def close_due_polls(self, client: interactions.Client) -> List[int]:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–ø—Ä–æ—Å—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–æ—à–ª–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ message_id –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤."""
        now = datetime.now(self.MSK)
        to_iso = now.isoformat()
        polls = self.db.list_polls_overdue(to_iso)

        closed: List[int] = []
        if not polls:
            return closed

        channel_id = int(self.cfg.get("channels.movie_polls"))
        channel = await client.fetch_channel(channel_id)

        for p in polls:
            mid = int(p["message_id"])
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é —Å—Ä–µ–¥–∏ –ª–∏–¥–µ—Ä–æ–≤ (>=2 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –º–∞–∫—Å–∏–º—É–º –≥–æ–ª–æ—Å–æ–≤)
                tied = self.db.top_tied_options(mid)
                if tied:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª–∏—Å—Ç–æ–≤, —á–∏—Å—Ç–∏–º –≥–æ–ª–æ—Å–∞, —Å—Ç–∞–≤–∏–º +10 –º–∏–Ω—É—Ç
                    option_ids = [int(o["id"]) for o in tied]
                    self.db.keep_only_options(mid, option_ids)
                    self.db.reset_votes(mid)
                    new_end = (now + timedelta(minutes=10)).isoformat()
                    self.db.set_poll_end(mid, new_end)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–µ—Ç–∫–æ–π –¥–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                    msg = await channel.fetch_message(mid)
                    embed = self._build_poll_embed(mid)
                    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–î–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (10 –º–∏–Ω—É—Ç)", inline=False)
                    await msg.edit(embed=embed, components=self._build_vote_components(mid))

                    role_id = self.cfg.get("roles.movie")
                    mention = f"<@&{int(role_id)}> " if role_id else ""
                    names = ", ".join(o['title'] for o in tied)
                    await channel.send(f"{mention}–ù–∏—á—å—è! –î–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É: {names} (10 –º–∏–Ω—É—Ç)")
                else:
                    winner = self.db.pick_winner(mid)
                    self.db.set_poll_status(mid, "closed")

                    msg = await channel.fetch_message(mid)
                    embed = self._build_poll_embed(mid)
                    if winner:
                        embed.add_field(name="–ü–æ–±–µ–¥–∏—Ç–µ–ª—å",
                                        value=f"{winner['title']} ({self.db.count_votes_by_option(mid).get(int(winner['id']), 0)} –≥–æ–ª–æ—Å–æ–≤)",
                                        inline=False)
                    await msg.edit(embed=embed, components=[])

                    if winner:
                        role_id = self.cfg.get("roles.movie")
                        mention = f"<@&{int(role_id)}> " if role_id else ""
                        announce = f"{mention}üéâ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–µ–≥–æ–¥–Ω—è —Å–º–æ—Ç—Ä–∏–º: {winner['title']}"
                        if winner.get("link"):
                            announce += f"\n{winner['link']}"
                        await channel.send(announce)
                    else:
                        await channel.send("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω (–Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)")

                    closed.append(mid)
            except Exception as e:
                log_db("ERROR", f"movie.close_due_polls failed for {mid}", str(e))

        return closed


    async def refresh_poll_embeds(self, client: interactions.Client) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–±–µ–¥ –æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤/–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)"""
        poll = self.db.get_latest_open_poll()
        if not poll:
            return
        channel_id = int(self.cfg.get("channels.movie_polls"))
        channel = await client.fetch_channel(channel_id)
        try:
            msg = await channel.fetch_message(int(poll["message_id"]))
            await msg.edit(embed=self._build_poll_embed(int(poll["message_id"])),
                           components=self._build_vote_components(int(poll["message_id"])) )
        except Exception:
            pass


_TASK_STARTED = False


def setup_tasks(bot: interactions.Client, service: MovieService) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—É (–æ–¥–∏–Ω–æ—á–Ω—ã–π —Å—Ç–∞—Ä—Ç)"""
    global _TASK_STARTED
    if _TASK_STARTED:
        return

    @Task.create(IntervalTrigger(minutes=1))
    async def _movie_loop():
        try:
            await service.close_due_polls(bot)
            await service.refresh_poll_embeds(bot)
        except Exception:
            pass

    _movie_loop.start()
    _TASK_STARTED = True


