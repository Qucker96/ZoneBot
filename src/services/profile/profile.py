import interactions
from datetime import datetime, timedelta
import pytz
from typing import Optional, List, Dict, Any

from utils.db import Users
from utils.log import log_db
from config import admin


class ProfileService:
    """Core –ª–æ–≥–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Å—é–¥—É"""

    def __init__(self) -> None:
        self.db = Users()
        self.cfg = admin
        self.MSK = pytz.timezone("Europe/Moscow")

    async def get_user_profile(self, user_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            Optional[Dict[str, Any]]: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ None
        """
        user_data = self.db.get_user(user_id)
        if not user_data:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            self.db.add_user(user_id)
            user_data = self.db.get_user(user_id)
        
        return user_data

    async def set_birthday(self, user_id: int, birthday_str: str) -> int:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            birthday_str (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM

        Returns:
            1: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            0: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            -1: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        """
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM
            day, month = birthday_str.split('.')
            day = int(day)
            month = int(month)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            if not (1 <= day <= 31 and 1 <= month <= 12):
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.02 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                test_date = datetime(2024, month, day)
            except ValueError:
                return 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∏–∑ db.py
            success = self.db.update_birthday(user_id, birthday_str)
            if success:
                log_db("INFO", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday_str}")
                return 1
            else:
                return -1
            
        except (ValueError, IndexError):
            return 0

    async def get_birthday_users_today(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
        today = datetime.now(self.MSK)
        today_str = f"{today.day:02d}.{today.month:02d}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ db.py
        return self.db.get_birthday_users_by_date(today_str)

    async def get_birthday_users_tomorrow(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
        tomorrow = datetime.now(self.MSK) + timedelta(days=1)
        tomorrow_str = f"{tomorrow.day:02d}.{tomorrow.month:02d}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ db.py
        return self.db.get_birthday_users_by_date(tomorrow_str)

    async def send_birthday_congratulations(self, bot: interactions.Client) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            birthday_users = await self.get_birthday_users_today()
            
            if not birthday_users:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
            channel_id = int(self.cfg.get("channels.birthday", self.cfg.get("channels.events")))
            channel = await bot.fetch_channel(channel_id)
            
            for user_data in birthday_users:
                user_id = user_data['user_id']
                try:
                    user = await bot.fetch_user(user_id)
                    if user:
                        embed = interactions.Embed(
                            title="üéâ –° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è! üéâ",
                            description=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {user.mention} —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ\n\n"
                                       f"–ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! ‚ú®",
                            color=0xFFD700
                        )
                        embed.add_field(
                            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                            value=f"–°–æ–æ–±—â–µ–Ω–∏–π: {user_data['messages']}\n"
                                  f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_data['warns']}",
                            inline=True
                        )
                        embed.set_thumbnail(url=user.avatar.url if user.avatar else None)
                        embed.set_footer(text=f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birthday']}")
                        
                        await channel.send(embed=embed)
                        
                except Exception as e:
                    log_db("ERROR", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                    
        except Exception as e:
            log_db("ERROR", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π: {str(e)}")

    def format_profile_embed(self, user_data: Dict[str, Any], user: interactions.User) -> interactions.Embed:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç embed –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        embed = interactions.Embed(
            title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {user.display_name}",
            color=0x00FF00
        )
        
        embed.set_thumbnail(url=user.avatar.url if user.avatar else None)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"–°–æ–æ–±—â–µ–Ω–∏–π: {user_data['messages']}\n"
                  f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_data['warns']}",
            inline=True
        )
        
        # –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
        birthday_text = user_data.get('birthday', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        if birthday_text == '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω':
            birthday_text = "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else:
            birthday_text = f"üéÇ {birthday_text}"
            
        embed.add_field(
            name="üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
            value=birthday_text,
            inline=True
        )
        
        embed.set_footer(text=f"ID: {user_data['user_id']}")
        
        return embed