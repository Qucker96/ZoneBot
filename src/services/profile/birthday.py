import interactions
from datetime import datetime, timedelta
import pytz
from typing import List, Dict, Any

from utils.db import Users
from utils.log import log_db
from interactions import Task, CronTrigger
from config import admin


class BirthdayService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""

    def __init__(self) -> None:
        self.db = Users()
        self.cfg = admin
        self.MSK = pytz.timezone("Europe/Moscow")

    async def get_birthday_users_today(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
        today = datetime.now(self.MSK)
        today_str = f"{today.day:02d}.{today.month:02d}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ db.py
        return self.db.get_birthday_users_by_date(today_str)

    async def get_birthday_users_tomorrow(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
        tomorrow = datetime.now(self.MSK) + timedelta(days=1)
        tomorrow_str = f"{tomorrow.day:02d}.{tomorrow.month:02d}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ db.py
        return self.db.get_birthday_users_by_date(tomorrow_str)

    async def send_birthday_congratulations(self, bot: interactions.Client) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            birthday_users = await self.get_birthday_users_today()
            
            if not birthday_users:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
            channel_id = int(self.cfg.get("channels.birthday", self.cfg.get("channels.events")))
            channel = await bot.fetch_channel(channel_id)
            
            for user_data in birthday_users:
                user_id = user_data['user_id']
                try:
                    user = await bot.fetch_user(user_id)
                    if user:
                        embed = interactions.Embed(
                            title="üéâ –° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è! üéâ",
                            description=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {user.mention} —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ\n\n"
                                       f"–ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! ‚ú®",
                            color=0xFFD700
                        )
                        embed.add_field(
                            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                            value=f"–°–æ–æ–±—â–µ–Ω–∏–π: {user_data['messages']}\n"
                                  f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_data['warns']}",
                            inline=True
                        )
                        embed.set_thumbnail(url=user.avatar.url if user.avatar else None)
                        embed.set_footer(text=f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birthday']}")
                        
                        await channel.send(embed=embed)
                        
                except Exception as e:
                    log_db("ERROR", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                    
        except Exception as e:
            log_db("ERROR", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π: {str(e)}")

    async def check_and_send_birthdays(self, bot: interactions.Client) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            await self.send_birthday_congratulations(bot)
        except Exception as e:
            log_db("ERROR", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {str(e)}")


def setup_birthday_tasks(bot: interactions.Client, birthday_service: BirthdayService) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
    
    @Task.create(CronTrigger("0 10 * * *", tz="Europe/Moscow"))
    async def birthday_check_task():
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ 10:00 –ø–æ –ú–°–ö"""
        await birthday_service.check_and_send_birthdays(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    birthday_check_task.start()
    
    log_db("INFO", "–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ú–°–ö)")